{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red170\green13\blue145;\red0\green0\blue0;
\red46\green13\blue110;\red196\green26\blue22;\red92\green38\blue153;\red162\green91\blue55;\red0\green116\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c35900\c14900\c60100;\cssrgb\c70110\c43655\c27585;\csgenericrgb\c0\c45600\c0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/126365/ios-frameworks-tutorial"}}{\fldrslt 
\f0\fs48 \cf2 https://www.raywenderlich.com/126365/ios-frameworks-tutorial}}
\f0\fs48 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://theswiftdev.com/2017/10/23/how-to-make-a-swift-framework/"}}{\fldrslt \cf2 https://theswiftdev.com/2017/10/23/how-to-make-a-swift-framework/}}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.amazon.com/Hamilton-Beach-33467-Programmable-6-Quart/dp/B00JR5AAWM/ref=cm_cr_arp_d_product_top?ie=UTF8"}}{\fldrslt \cf2 https://www.amazon.com/Hamilton-Beach-33467-Programmable-6-Quart/dp/B00JR5AAWM/ref=cm_cr_arp_d_product_top?ie=UTF8}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.reddit.com/r/slowcooking/top/"}}{\fldrslt \cf2 https://www.reddit.com/r/slowcooking/top/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.reddit.com/r/slowcooking/comments/7ah33a/a_sample_of_my_slow_cooking_recipe_collection/"}}{\fldrslt \cf2 https://www.reddit.com/r/slowcooking/comments/7ah33a/a_sample_of_my_slow_cooking_recipe_collection/}}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\b \cf2 Heavy 
\i\b0 struggle to do all reps
\i0 \
Squat 4x5		\
Bench 4x5	\
Deadlift 1x5	\
\

\b Light  
\i\b0 fairly easy, all reps are smooth
\i0 \
Squat 2x5		\
OHP 3x5		\
Static Hold\

\i 12% of last heavy set of 5
\i0 \
\

\b Medium   
\i\b0 feels like you\'92re working hard but no danger of missing a rep, have energy left after each set
\i0 \
Squat 1-3x5	\
Bench 1-3x5	\
Pullups 3x8-10\

\i 6% of last heavy set of 5\

\i0 \
squat	5 11.5\
bench	5	10\
dead		5	12\
ohp		5.7\
\
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \cf3 import\cf4  os.log
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf5 os_log\cf4 (\cf6 "creating weight with %@"\cf4 , type: .\cf7 info\cf4 , obj)
\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs48 \cf2 			also .error, .fault, .debug\
\

\i \
review NRepMaxPlan\
add some sort of LinearPlan\
add FixedRepsPlan\
add PercentOfPlan\
how do we handle light and medium?\
	maybe it just falls out if exercise weight is set?\
review config for the younger crowd\
how to handle plan configuration?\
	eg num warmup sets, maybe they can\'92t configure that?\
need to do better when there is no weight\
	maybe this should be required?\
need a stub or something to save result\
need to handle progression\
program a deload?\
\
\
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\i0\fs36 \cf8 /// Used to store results for executing a plan as well as settings used to configure a plan.
\f0\fs24 \cf0 \

\f1\fs36 \cf8 /// For results the only common field is "date" which is when the plan was executed.
\f0\fs24 \cf0 \
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \cf3 private\cf4  \cf3 class\cf4  Data \{    \cf9 // TODO: try and get rid of this
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 enum\cf4  Value \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 case\cf4  date(Date)
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 case\cf4  double(Double)
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 case\cf4  int(Int)
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4     
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 func\cf4  set(\cf3 _\cf4  name: \cf7 String\cf4 , \cf3 _\cf4  value: \cf7 Value\cf4 ) \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4         data[name] = value
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4     
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 func\cf4  getDate(\cf3 _\cf4  name: \cf7 String\cf4 ) -> \cf7 Date\cf4 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 if\cf4  \cf3 let\cf4  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 switch\cf4  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 case\cf4  .date(\cf3 let\cf4  value): \cf3 return\cf4  value
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 default\cf4 : \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4     
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 func\cf4  getDouble(\cf3 _\cf4  name: \cf7 String\cf4 ) -> \cf7 Double\cf4 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 if\cf4  \cf3 let\cf4  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 switch\cf4  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 case\cf4  .double(\cf3 let\cf4  value): \cf3 return\cf4  value
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 default\cf4 : \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4     
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 func\cf4  getInt(\cf3 _\cf4  name: \cf7 String\cf4 ) -> \cf7 Int\cf4 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 if\cf4  \cf3 let\cf4  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 switch\cf4  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 case\cf4  .int(\cf3 let\cf4  value): \cf3 return\cf4  value
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \cf3 default\cf4 : \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4         \cf3 return\cf4  \cf3 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf4     
\f0\fs24 \cf0 \

\f1\fs36 \cf4     \cf3 var\cf4  data: [\cf7 String\cf4 : \cf7 Value\cf4 ] = [:]
\f0\fs24 \cf0 \

\f1\fs36 \cf4 \}
\f0\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs48 \cf2 \
carthage\
	install with homebrew\
	pretty simple\
cocoapods\
	generates workspace\
	changes project configs\
	adds new build phase\
	\
\
* Make sure xcode is installing a debug version (with asserts enabled)\
* Look at whats involved in defining some popular programs\
	- eg from my book and from reddit\
* Maybe use state restoration\
* Save state as it is changed, not on entering the background\
* Dont load everything into memory\
* Export to csv\
* Instead of meso cycle, rpe cycle, etc have style/method/type/plan\
	- have code to handle stuff like progression, deloads, sets and reps\
	- with some tuneable parameters\
* Move the backend to a separate library (or maybe framework)\
	- once the swift package manager supports ios\
\
\
\
	}