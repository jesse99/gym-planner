{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red0\green0\blue0;\red162\green91\blue55;
\red170\green13\blue145;\red92\green38\blue153;\red162\green91\blue55;\red0\green116\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\csgenericrgb\c0\c0\c0;\csgenericrgb\c63573\c35812\c21460;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c35900\c14900\c60100;\cssrgb\c70110\c43655\c27585;\csgenericrgb\c0\c45600\c0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/126365/ios-frameworks-tutorial"}}{\fldrslt 
\f0\fs48 \cf2 https://www.raywenderlich.com/126365/ios-frameworks-tutorial}}
\f0\fs48 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://theswiftdev.com/2017/10/23/how-to-make-a-swift-framework/"}}{\fldrslt \cf2 https://theswiftdev.com/2017/10/23/how-to-make-a-swift-framework/}}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.amazon.com/Hamilton-Beach-33467-Programmable-6-Quart/dp/B00JR5AAWM/ref=cm_cr_arp_d_product_top?ie=UTF8"}}{\fldrslt \cf2 https://www.amazon.com/Hamilton-Beach-33467-Programmable-6-Quart/dp/B00JR5AAWM/ref=cm_cr_arp_d_product_top?ie=UTF8}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.reddit.com/r/slowcooking/top/"}}{\fldrslt \cf2 https://www.reddit.com/r/slowcooking/top/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.reddit.com/r/slowcooking/comments/7ah33a/a_sample_of_my_slow_cooking_recipe_collection/"}}{\fldrslt \cf2 https://www.reddit.com/r/slowcooking/comments/7ah33a/a_sample_of_my_slow_cooking_recipe_collection/}}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\b \cf2 Heavy 
\i\b0 struggle to do all reps
\i0 \
Squat 4x5		\
Bench 4x5	\
Deadlift 1x5	\
\

\b Light  
\i\b0 fairly easy, all reps are smooth
\i0 \
Squat 2x5		\
OHP 3x5		\
Static Hold\

\i 12% of last heavy set of 5
\i0 \
\

\b Medium   
\i\b0 feels like you\'92re working hard but no danger of missing a rep, have energy left after each set
\i0 \
Squat 1-3x5	\
Bench 1-3x5	\
Pullups 3x8-10\

\i 6% of last heavy set of 5\

\i0 \
squat	5 11.5\
bench	5	10\
dead		5	12\
ohp		5.7\
\
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \cf3     \cf4 /// "Previous was 125 lbs"
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  prevLabel() -> \cf6 String
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf4 /// "+5 lbs, same x3, +5 lbs x4"
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  historyLabel() -> \cf6 String
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf5 func\cf3  makeHistoryLabel(\cf5 _\cf3  weights: [\cf6 Double\cf3 ]) -> \cf6 String\cf3  \{
\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\i\fs48 \cf2 \
\
need some sort of previous/history labels\
	include stalled info\
probably want a deload for time\
	add a weightChanged date to setting\
	on entry deload based on that date\
	either previous or history label needs to say deloaded (maybe with the weeks)\
review code\
for unit tests could just test results\
	maybe with an option to log activities\
	if we don\'92t want a unit test then cleanup plan init functions\
531 has a deload every 4th week\
how do we handle light and medium?\
	maybe it just falls out if exercise weight is set?\
review config for the younger crowd\
how to handle plan configuration?\
	eg num warmup sets, maybe they can\'92t configure that?\
need to do better when there is no weight\
	maybe this should be required?\
need a stub or something to save result\
need to handle progression\
program a deload?\
\
\
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\i0\fs36 \cf7 /// Used to store results for executing a plan as well as settings used to configure a plan.
\f0\fs24 \cf0 \

\f1\fs36 \cf7 /// For results the only common field is "date" which is when the plan was executed.
\f0\fs24 \cf0 \
\pard\tx864\pardeftab864\pardirnatural\partightenfactor0

\f1\fs36 \cf5 private\cf3  \cf5 class\cf3  Data \{    \cf8 // TODO: try and get rid of this
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 enum\cf3  Value \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 case\cf3  date(Date)
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 case\cf3  double(Double)
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 case\cf3  int(Int)
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  set(\cf5 _\cf3  name: \cf6 String\cf3 , \cf5 _\cf3  value: \cf6 Value\cf3 ) \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3         data[name] = value
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  getDate(\cf5 _\cf3  name: \cf6 String\cf3 ) -> \cf6 Date\cf3 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 if\cf3  \cf5 let\cf3  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 switch\cf3  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 case\cf3  .date(\cf5 let\cf3  value): \cf5 return\cf3  value
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 default\cf3 : \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  getDouble(\cf5 _\cf3  name: \cf6 String\cf3 ) -> \cf6 Double\cf3 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 if\cf3  \cf5 let\cf3  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 switch\cf3  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 case\cf3  .double(\cf5 let\cf3  value): \cf5 return\cf3  value
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 default\cf3 : \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 func\cf3  getInt(\cf5 _\cf3  name: \cf6 String\cf3 ) -> \cf6 Int\cf3 ? \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 if\cf3  \cf5 let\cf3  v = data[name] \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 switch\cf3  v \{
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 case\cf3  .int(\cf5 let\cf3  value): \cf5 return\cf3  value
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \cf5 default\cf3 : \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3             \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3         \cf5 return\cf3  \cf5 nil
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \}
\f0\fs24 \cf0 \

\f1\fs36 \cf3     
\f0\fs24 \cf0 \

\f1\fs36 \cf3     \cf5 var\cf3  data: [\cf6 String\cf3 : \cf6 Value\cf3 ] = [:]
\f0\fs24 \cf0 \

\f1\fs36 \cf3 \}
\f0\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs48 \cf2 \
carthage\
	install with homebrew\
	pretty simple\
cocoapods\
	generates workspace\
	changes project configs\
	adds new build phase\
	\
\
* Make sure xcode is installing a debug version (with asserts enabled)\
* Look at whats involved in defining some popular programs\
	- eg from my book and from reddit\
* Maybe use state restoration\
* Save state as it is changed, not on entering the background\
* Dont load everything into memory\
* Export to csv\
* Instead of meso cycle, rpe cycle, etc have style/method/type/plan\
	- have code to handle stuff like progression, deloads, sets and reps\
	- with some tuneable parameters\
* Move the backend to a separate library (or maybe framework)\
	- once the swift package manager supports ios\
\
\
\
	}